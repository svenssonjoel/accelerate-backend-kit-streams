


* Benchmark: 
  Batching and fusion. 
  Adaptation.          

  + Literature, does any system do batching/fusion. 
    - Read InfoSphere streams 
    - TwitterStorm 
    - RX 




 * Arbitrary mutation or subtrees (structured graphs). 


 Current set of ops (ops to add #) 
 * source 
 * smap 
 * sscan     / iterate (stateful or stateless) 
 * szipwith  / merge 
 * # filter 
 * # merge  (nondeterministic) 
 * # NetIn / NetOut 
    

 * runtime 


 * Lost some of my notes here because of clumsiness 
---------------------------------------------------------------------------
-- ZipWith Thoughts 
--------------------------------------------------------------------------- 
  ZipWith is a node that accepts data from two streams. This type 
  of node cannot be implemented as a tail call from any other node. 

  * ZipWith can run in a thread of its own, polling on two buffers and executing 
    once data is available. 

  * Alternatives ?


---------------------------------------------------------------------------
-- About sources and Nodes 
--------------------------------------------------------------------------- 
 
   * Sources, how to implement. 
      
     + a source as a standalone thread pushing data into a buffer, 
       alternatively calling a fptr with. 

     + a source as a function that is called by some controlling program 
       ruitinely. Source writes to buffer, or calls a fptr. 
       
     + How can a source be made to slow down ? 
       - options .. ? 

       	      
     
 

---------------------------------------------------------------------------
-- API Thoughts 
--------------------------------------------------------------------------- 

 * Low Level (C Library) 
   + CreateOpNode args  
   + Connect / Reconnect (repoint) 
   + AddListener (cons to a nodes out "list") 
   + DeleteOpNode (that is entirely disconnected, 
                   no in arrow. and outarrow pointing to -> blocker)   

   + Built in nodes 
     + Blocker 
     + Blackhole 

   + Thoughts: 
     The Low Level API may potentially also consist of parts 
     that are generated and loaded on-the-fly. 
     + Why? 
       An update to the graph may introduce a node with entirely new 
       input / output types compared to any launched before. 
       This means a new Struct OPNODE_tin_tout needs to be generated 
       and compiled into the executing program. 
       I think it is unreasonable that the Low Level C library should 
       have "prototype" node structs available for all possible cases. 
       And I think that, even c, wont allow arbitrary "casting" of for 
       example void * into  void (*fun)(t1, t2, t3)  
       
       + Alternatives ? (Dont know just yet)  
      
     
 * Runtime System Higher Level (Haskell Library) 
   + Has Complete view of original Program Graph 
   + Has Complete view of optimized "actual" Graph (after fusion/batching) 
   
   + Install Plans 
     - Set of actions to perform on the executing graph 

   + Compile 
   + LoadSO 
   
   + If the Low Level C API is "dynamic" as suggested above. Then 
     this library should be able to compile and link in "patches" 
     to the Low Level runtime system. 

     Current experimental OPNODE type: 
     --- C Code ---   
       struct OPNODE { 
         void (*op)(struct OPNODE*, int);   // what to do now
         struct OPNODE *cont;               // what to do next 
       }; 
     --------------
     is limited to representing nodes that accept an int as argument 
     
     -Int-> Op -Int-> 

     So if a new node taking and produces floats is introduced into the 
     graph, this OPNODE struct cannot represent that operation. 
  
     Desired: A generic Base OPNODE Struct. 
              Ways to generate "subtypes" of that base OPNODE. 
	      Can we cast from the "base" to any variant safely ? 
     --- C Code --- 
     struct BASE_OPNODE { 
        // No actual function here (something that takes up same amount of space)	
	char placeholder[8];  // necessary ? 
	// a list/tree of nodes to pass result onwards too
	struct BaseOpNodeList *continuations; 
     }	
     
     // Operation accepting an int
     struct OPNODE_Int {
     	void (*op)(BASE_OPNODE *this, int); // what to do now 
	struct BaseOpNodeList *continuations; // continuations accepting 
	                                      // result type of op
					      // through this tailcall
     --------------


     * Potential Issues: 
       + Portability concerns (Pointer sizes and alignments	     
     
---------------------------------------------------------------------------
-- RTS Thoughts 
--------------------------------------------------------------------------- 
  
 * Memory allocation / deallocation 
 * ... 


---------------------------------------------------------------------------
-- Backoff, backpreasure, 
--------------------------------------------------------------------------- 
 There needs to be a metod to send messages backwards, requesting that 
 an earlier node slows down its pushrate. 
   * In the case of a tailcall fptr chain I imagine this propagates all the
     way to the "source" and requests that it slows down. 
      
     I imagine this will pop up as soon as there are things such as zipwith 
     that reads from buffers. 
     Say that one of the zipwith input buffers are filling up. Now a message 
     must be sent to the source that is filling that buffer to slow down. 



---------------------------------------------------------------------------
-- Desired Properties 
--------------------------------------------------------------------------- 
  
  * Adding a listener to a stream should not cause loss of data for	
    other listeners of that stream. 

  
